//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using test.HelperClasses;
using test.FactoryClasses;
using test.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace test.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Course'.<br/><br/></summary>
	[Serializable]
	public partial class CourseEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<EnrollmentEntity> _enrollments;
		private InstructorEntity _instructor;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static CourseEntityStaticMetaData _staticMetaData = new CourseEntityStaticMetaData();
		private static CourseRelations _relationsFactory = new CourseRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Instructor</summary>
			public static readonly string Instructor = "Instructor";
			/// <summary>Member name Enrollments</summary>
			public static readonly string Enrollments = "Enrollments";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class CourseEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public CourseEntityStaticMetaData()
			{
				SetEntityCoreInfo("CourseEntity", InheritanceHierarchyType.None, false, (int)test.EntityType.CourseEntity, typeof(CourseEntity), typeof(CourseEntityFactory), false);
				AddNavigatorMetaData<CourseEntity, EntityCollection<EnrollmentEntity>>("Enrollments", a => a._enrollments, (a, b) => a._enrollments = b, a => a.Enrollments, () => new CourseRelations().EnrollmentEntityUsingCourseId, typeof(EnrollmentEntity), (int)test.EntityType.EnrollmentEntity);
				AddNavigatorMetaData<CourseEntity, InstructorEntity>("Instructor", "Courses", (a, b) => a._instructor = b, a => a._instructor, (a, b) => a.Instructor = b, test.RelationClasses.StaticCourseRelations.InstructorEntityUsingInstructorIdStatic, ()=>new CourseRelations().InstructorEntityUsingInstructorId, null, new int[] { (int)CourseFieldIndex.InstructorId }, null, true, (int)test.EntityType.InstructorEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static CourseEntity()
		{
		}

		/// <summary> CTor</summary>
		public CourseEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public CourseEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this CourseEntity</param>
		public CourseEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Course which data should be fetched into this Course object</param>
		public CourseEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Course which data should be fetched into this Course object</param>
		/// <param name="validator">The custom validator object for this CourseEntity</param>
		public CourseEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected CourseEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Enrollment' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEnrollments() { return CreateRelationInfoForNavigator("Enrollments"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Instructor' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoInstructor() { return CreateRelationInfoForNavigator("Instructor"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this CourseEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static CourseRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Enrollment' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEnrollments { get { return _staticMetaData.GetPrefetchPathElement("Enrollments", CommonEntityBase.CreateEntityCollection<EnrollmentEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Instructor' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathInstructor { get { return _staticMetaData.GetPrefetchPathElement("Instructor", CommonEntityBase.CreateEntityCollection<InstructorEntity>()); } }

		/// <summary>The Description property of the Entity Course<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Course"."Description".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Description
		{
			get { return (System.String)GetValue((int)CourseFieldIndex.Description, true); }
			set	{ SetValue((int)CourseFieldIndex.Description, value); }
		}

		/// <summary>The Id property of the Entity Course<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Course"."Id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)CourseFieldIndex.Id, true); }
			set	{ SetValue((int)CourseFieldIndex.Id, value); }
		}

		/// <summary>The InstructorId property of the Entity Course<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Course"."InstructorId".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> InstructorId
		{
			get { return (Nullable<System.Int32>)GetValue((int)CourseFieldIndex.InstructorId, false); }
			set	{ SetValue((int)CourseFieldIndex.InstructorId, value); }
		}

		/// <summary>The Name property of the Entity Course<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Course"."Name".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)CourseFieldIndex.Name, true); }
			set	{ SetValue((int)CourseFieldIndex.Name, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'EnrollmentEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EnrollmentEntity))]
		public virtual EntityCollection<EnrollmentEntity> Enrollments { get { return GetOrCreateEntityCollection<EnrollmentEntity, EnrollmentEntityFactory>("Course", true, false, ref _enrollments); } }

		/// <summary>Gets / sets related entity of type 'InstructorEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual InstructorEntity Instructor
		{
			get { return _instructor; }
			set { SetSingleRelatedEntityNavigator(value, "Instructor"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace test
{
	public enum CourseFieldIndex
	{
		///<summary>Description. </summary>
		Description,
		///<summary>Id. </summary>
		Id,
		///<summary>InstructorId. </summary>
		InstructorId,
		///<summary>Name. </summary>
		Name,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace test.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Course. </summary>
	public partial class CourseRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between CourseEntity and EnrollmentEntity over the 1:n relation they have, using the relation between the fields: Course.Id - Enrollment.CourseId</summary>
		public virtual IEntityRelation EnrollmentEntityUsingCourseId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Enrollments", true, new[] { CourseFields.Id, EnrollmentFields.CourseId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between CourseEntity and InstructorEntity over the m:1 relation they have, using the relation between the fields: Course.InstructorId - Instructor.Id</summary>
		public virtual IEntityRelation InstructorEntityUsingInstructorId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Instructor", false, new[] { InstructorFields.Id, CourseFields.InstructorId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticCourseRelations
	{
		internal static readonly IEntityRelation EnrollmentEntityUsingCourseIdStatic = new CourseRelations().EnrollmentEntityUsingCourseId;
		internal static readonly IEntityRelation InstructorEntityUsingInstructorIdStatic = new CourseRelations().InstructorEntityUsingInstructorId;

		/// <summary>CTor</summary>
		static StaticCourseRelations() { }
	}
}
