//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using test.HelperClasses;
using test.FactoryClasses;
using test.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace test.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Student'.<br/><br/></summary>
	[Serializable]
	public partial class StudentEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<EnrollmentEntity> _enrollments;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static StudentEntityStaticMetaData _staticMetaData = new StudentEntityStaticMetaData();
		private static StudentRelations _relationsFactory = new StudentRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Enrollments</summary>
			public static readonly string Enrollments = "Enrollments";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class StudentEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public StudentEntityStaticMetaData()
			{
				SetEntityCoreInfo("StudentEntity", InheritanceHierarchyType.None, false, (int)test.EntityType.StudentEntity, typeof(StudentEntity), typeof(StudentEntityFactory), false);
				AddNavigatorMetaData<StudentEntity, EntityCollection<EnrollmentEntity>>("Enrollments", a => a._enrollments, (a, b) => a._enrollments = b, a => a.Enrollments, () => new StudentRelations().EnrollmentEntityUsingStudentId, typeof(EnrollmentEntity), (int)test.EntityType.EnrollmentEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static StudentEntity()
		{
		}

		/// <summary> CTor</summary>
		public StudentEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public StudentEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this StudentEntity</param>
		public StudentEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Student which data should be fetched into this Student object</param>
		public StudentEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Student which data should be fetched into this Student object</param>
		/// <param name="validator">The custom validator object for this StudentEntity</param>
		public StudentEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected StudentEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Enrollment' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEnrollments() { return CreateRelationInfoForNavigator("Enrollments"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this StudentEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static StudentRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Enrollment' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEnrollments { get { return _staticMetaData.GetPrefetchPathElement("Enrollments", CommonEntityBase.CreateEntityCollection<EnrollmentEntity>()); } }

		/// <summary>The DateOfBirth property of the Entity Student<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Student"."DateOfBirth".<br/>Table field type characteristics (type, precision, scale, length): Date, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateOfBirth
		{
			get { return (System.DateTime)GetValue((int)StudentFieldIndex.DateOfBirth, true); }
			set	{ SetValue((int)StudentFieldIndex.DateOfBirth, value); }
		}

		/// <summary>The Email property of the Entity Student<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Student"."Email".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)StudentFieldIndex.Email, true); }
			set	{ SetValue((int)StudentFieldIndex.Email, value); }
		}

		/// <summary>The FirstName property of the Entity Student<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Student"."FirstName".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FirstName
		{
			get { return (System.String)GetValue((int)StudentFieldIndex.FirstName, true); }
			set	{ SetValue((int)StudentFieldIndex.FirstName, value); }
		}

		/// <summary>The Id property of the Entity Student<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Student"."Id".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)StudentFieldIndex.Id, true); }
			set	{ SetValue((int)StudentFieldIndex.Id, value); }
		}

		/// <summary>The LastName property of the Entity Student<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Student"."LastName".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)StudentFieldIndex.LastName, true); }
			set	{ SetValue((int)StudentFieldIndex.LastName, value); }
		}

		/// <summary>The Phone property of the Entity Student<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Student"."Phone".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Phone
		{
			get { return (System.String)GetValue((int)StudentFieldIndex.Phone, true); }
			set	{ SetValue((int)StudentFieldIndex.Phone, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'EnrollmentEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EnrollmentEntity))]
		public virtual EntityCollection<EnrollmentEntity> Enrollments { get { return GetOrCreateEntityCollection<EnrollmentEntity, EnrollmentEntityFactory>("Student", true, false, ref _enrollments); } }
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace test
{
	public enum StudentFieldIndex
	{
		///<summary>DateOfBirth. </summary>
		DateOfBirth,
		///<summary>Email. </summary>
		Email,
		///<summary>FirstName. </summary>
		FirstName,
		///<summary>Id. </summary>
		Id,
		///<summary>LastName. </summary>
		LastName,
		///<summary>Phone. </summary>
		Phone,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace test.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Student. </summary>
	public partial class StudentRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between StudentEntity and EnrollmentEntity over the 1:n relation they have, using the relation between the fields: Student.Id - Enrollment.StudentId</summary>
		public virtual IEntityRelation EnrollmentEntityUsingStudentId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Enrollments", true, new[] { StudentFields.Id, EnrollmentFields.StudentId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticStudentRelations
	{
		internal static readonly IEntityRelation EnrollmentEntityUsingStudentIdStatic = new StudentRelations().EnrollmentEntityUsingStudentId;

		/// <summary>CTor</summary>
		static StaticStudentRelations() { }
	}
}
